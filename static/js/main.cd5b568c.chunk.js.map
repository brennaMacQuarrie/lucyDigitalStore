{"version":3,"sources":["Components/firebase.js","Components/Header.js","Components/Item.js","Components/Cart.js","Components/App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","props","className","Item","value","type","src","image","alt","title","price","onClick","addToCart","Cart","this","imgRef","cartRemove","aria-hidden","React","Component","App","handleCart","setState","show","state","handleJewelry","database","ref","on","response","jewelryArray","val","items","forEach","item","push","handlePaintings","paintingsArray","handleAll","newState","itemToAdd","console","log","removeFromCart","itemTobeRemoved","child","remove","cart","newCart","data","key","href","length","map","cartItem","id","imageRef","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd5b568c.chunk.js","sourcesContent":["// firebase.js\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// Initialize Firebase\n// *** USE YOUR CONFIG OBJECT ***\nconst firebaseconfig = {\n    apiKey: \"AIzaSyC9_ifzps_1DQ-2zArCIMANCwx8JWPuJWU\",\n    authDomain: \"lucy-2b3db.firebaseapp.com\",\n    databaseURL: \"https://lucy-2b3db.firebaseio.com\",\n    projectId: \"lucy-2b3db\",\n    storageBucket: \"lucy-2b3db.appspot.com\",\n    messagingSenderId: \"1067313877074\",\n    appId: \"1:1067313877074:web:cd0841155b5fe30c584f8b\",\n};\n\nfirebase.initializeApp(firebaseconfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;\n","import React from 'react';\n\n\nconst Header = (props) => {\n    return (\n        <div className=\"header\">\n            \n            <div className=\"logoBox\">\n                <h1>L</h1>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\n// import * as Image from '../assets';\n\n\nconst Item = (props) => {\n  \n    return (\n      <div className=\"individualItem\" value={props.type}>\n        <div>\n          <img src={props.image} alt={props.title}/>\n        </div>\n        \n        <h3>{props.title}</h3>\n        <p>{props.price}</p>\n        {/* // does this need an argument? */}\n        <button onClick={props.addToCart}>add to cart</button>\n      </div>\n    );\n}\n\nexport default Item;\n// ","import React from 'react';\nimport firebase from './firebase';\n\nclass Cart extends React.Component {\n    // console.log(props);\n    render() {\n        return (\n            <div className=\"fakeItem\">\n                <img src={this.props.imgRef} alt=\"green mala.\" />\n                <div>\n                    <h4>{this.props.title}</h4>\n                    <p>{this.props.price}</p>\n                </div>\n                <button onClick={this.props.cartRemove}>\n                    <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Cart;\n\n","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport Header from './Header';\nimport Item from './Item';\nimport ToggleDisplay from \"react-toggle-display\";\nimport Cart from './Cart';\nimport '../App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cart: [],\n      show: false,\n      items: [],\n    };\n  }\n\n  componentDidMount() {\n    // Items population\n    const dbRef = firebase.database().ref();\n    dbRef.on(\"value\", (response) => {\n\n      const newState = [];\n      const data = response.val();\n      // gets into items array in my db\n      const items = data.items;\n\n      items.forEach((item) => {\n        newState.push(item); \n      });\n\n      this.setState({\n        items: newState,\n      });\n    });\n\n    //Cart\n    const dbRefCart = firebase.database().ref('Cart');\n    dbRefCart.on(\"value\", (response) => {\n\n      const newCart = [];\n      const data = response.val();\n\n      // const items = data.items;\n\n      for (let key in data) {\n        newCart.push({\n          key: key,\n          item: data[key].item,\n        })\n      }\n      \n      this.setState({\n        cart: newCart,\n      });\n      console.log(this.state.cart);\n    });\n  }\n\n  // function to change the state of the cartView\n  handleCart = () => {\n    this.setState({\n      show: !this.state.show,\n    });\n  };\n\n  // 3 functions to show only specific items based on TYPE\n  handleJewelry = () => {\n      const dbRef = firebase.database().ref();\n      dbRef.on(\"value\", (response) => {\n      // building a jewelry array\n      const jewelryArray = [];\n      const data = response.val();\n      const items = data.items;\n      items.forEach((item) => {\n        if (item.type == \"jewelry\") {\n          jewelryArray.push(item); \n        }\n      });\n\n      this.setState({\n        items: jewelryArray,\n      });\n    });\n  }\n\n  handlePaintings = () => {\n    const dbRef = firebase.database().ref();\n    dbRef.on(\"value\", (response) => {\n      // building a paintings array\n      const paintingsArray = [];\n      const data = response.val();\n      const items = data.items;\n      items.forEach((item) => {\n        if (item.type == \"painting\") {\n          paintingsArray.push(item); \n        }\n      });\n\n      this.setState({\n        items: paintingsArray,\n      });\n    });\n  }\n\n  handleAll = () => {\n    const dbRef = firebase.database().ref();\n    dbRef.on(\"value\", (response) => {\n      // revert to original db population\n      const newState = [];\n      const data = response.val();\n      const items = data.items;\n      items.forEach((item) => {\n        newState.push(item); \n      });\n\n      this.setState({\n        items: newState,\n      });\n    });\n  }\n\n\n  // two button click handlers that dymanically alter Cart in db\n  addToCart = (itemToAdd) => {\n    const dbRef = firebase.database().ref('Cart');\n    dbRef.push(itemToAdd);\n    console.log(itemToAdd);\n    // this is the item object with no key\n  }\n\n  removeFromCart = (itemTobeRemoved) => {\n    const dbRef = firebase.database().ref('Cart');\n    dbRef.child(itemTobeRemoved).remove();\n  }\n\n\n\n\n  render() {\n    console.log(this.state.cart);\n    const copyright = '\\u00A9'; \n    // this is AN item object with all undefined info\n    return (\n      <div className=\"App\">\n\n        <nav>\n          <div className=\"blogContainer\">\n\n            <div className=\"gradient\">\n              <div className=\"blogLink\">\n                <a href=\"https://friends4trees4life.com/\">Blog</a>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"cartDiv\">\n\n            <button onClick={() => this.handleCart()} className=\"cartShowIcon\">\n              <i className=\"fa fa-shopping-cart\"></i>\n            </button>\n\n          <ToggleDisplay className=\"cart\" show={this.state.show}>\n\n            <h2>Your Cart</h2>\n            {this.state.cart.length > 0 ? (\n              <div className=\"cartContainer\">\n                {this.state.cart.map((cartItem) => {\n                  // this is also an object with all undefined info\n                  console.log(cartItem);\n                  return (\n                    <Cart \n                      key={cartItem.id}\n                      image={cartItem.imageRef}\n                      title={cartItem.name}\n                      price={cartItem.price}\n                      type={cartItem.type}\n                      cartRemove={() => {\n                        this.removeFromCart(cartItem.key)\n                      }\n                    }\n                    />\n                  );\n                })}\n              </div>) : null}\n            \n          </ToggleDisplay>\n          </div>\n        </nav>\n\n\n        <Header />\n\n        <main className=\"wrapper\">\n          <h2>View By</h2>\n          <ul className=\"viewOptions\">\n            <li>\n              <button onClick={this.handlePaintings}>Paintings</button>\n            </li>\n            <li>\n              <button onClick={this.handleAll}>All</button>\n            </li>\n            <li>\n              <button onClick={this.handleJewelry}>Jewelry</button>\n            </li>\n          </ul>\n\n          <div className=\"mainDisplay\">\n            {this.state.items.map((item) => {\n              return (\n                <div className=\"item\">\n                  <Item\n                    key={item.key}\n                    image={item.imageRef}\n                    title={item.name}\n                    price={item.price}\n                    type={item.type}\n                    addToCart={() => {\n                      this.addToCart(item)\n                      }\n                    }\n                  />\n                  {/* <button onClick={() => {\n                    this.addToCart(item)\n                    }\n                  }\n                  >add to cart</button> */}\n\n                </div>\n\n              );\n            })}\n          </div>\n        </main>\n\n        <footer>\n          {/* <img src=\"/assets/braceletMagnesite.jpeg\" alt=\"\"/> */}\n          <p>{copyright} Juno College by <a href=\"https://brennamacquarrie.dev\">Brenna MacQuarrie</a></p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}